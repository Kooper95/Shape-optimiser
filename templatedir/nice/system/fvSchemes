/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  8
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
/*
ddtSchemes
{
    default         Euler;
}

gradSchemes
{
    default         Gauss linear;

    limited         cellLimited Gauss linear 1;
    grad(U)         $limited;
    grad(k)         $limited;
    grad(omega)     $limited;
}

divSchemes
{
    default         none;

    div(phi,U)      Gauss linearUpwind limited;

    turbulence      Gauss linearUpwind limited;
    energy          Gauss linearUpwind limited;

    div(phi,k)      $turbulence;
    div(phi,omega)  $turbulence;

    div(phi,e)      $energy;
    div(phi,K)      $energy;
    div(phi,Ekp)    $energy;

    div(phiv,p)     Gauss upwind;
    div((phi|interpolate(rho)),p) Gauss upwind;

    div(((rho*nuEff)*dev2(T(grad(U)))))    Gauss linear;
    div(tauMC)      Gauss linearUpwind limited;
}

laplacianSchemes
{
    default         Gauss linear corrected;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    default         corrected;
}

wallDist
{
    method meshWave;
}
*/
// ************************************************************************* //
//fluxScheme Kurganov;

ddtSchemes
{
default Euler;
}

gradSchemes
{
    default Gauss linear limited 0.5;
    limited         cellLimited Gauss linear 1;
    grad(U)         $limited;
    grad(k)         $limited;
    grad(omega)     $limited;
}

divSchemes
{
default none;
div(phi,U) Gauss linearUpwind limited; //Gauss limitedLinearV 0.8; 
div(tauMC) Gauss linear limited 0.5;
div(phi,omega) Gauss upwind;
div(phi,k) Gauss upwind;
}

laplacianSchemes
{
default Gauss linear limited 0.5;
/*laplacian(muEff,U) Gauss linear corrected;
laplacian(alphaEff,e) Gauss linear corrected;
laplacian((rho*DomegaEff),omega) Gauss linear corrected;
laplacian((rho*DkEff),k) Gauss linear corrected;*/
}

interpolationSchemes
{
default linear;
reconstruct(rho) vanLeer;
reconstruct(U) vanLeerV;
reconstruct(T) vanLeer;
}

snGradSchemes
{
default corrected;
}

wallDist
{
method meshWave;
}
